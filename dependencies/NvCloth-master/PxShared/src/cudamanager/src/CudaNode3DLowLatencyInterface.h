// This code contains NVIDIA Confidential Information and is disclosed to you
// under a form of NVIDIA software license agreement provided separately to you.
//
// Notice
// NVIDIA Corporation and its licensors retain all intellectual property and
// proprietary rights in and to this software and related documentation and
// any modifications thereto. Any use, reproduction, disclosure, or
// distribution of this software and related documentation without an express
// license agreement from NVIDIA Corporation is strictly prohibited.
//
// ALL NVIDIA DESIGN SPECIFICATIONS, CODE ARE PROVIDED "AS IS.". NVIDIA MAKES
// NO WARRANTIES, EXPRESSED, IMPLIED, STATUTORY, OR OTHERWISE WITH RESPECT TO
// THE MATERIALS, AND EXPRESSLY DISCLAIMS ALL IMPLIED WARRANTIES OF NONINFRINGEMENT,
// MERCHANTABILITY, AND FITNESS FOR A PARTICULAR PURPOSE.
//
// Information and code furnished is believed to be accurate and reliable.
// However, NVIDIA Corporation assumes no responsibility for the consequences of use of such
// information or for any infringement of patents or other rights of third parties that may
// result from its use. No license is granted by implication or otherwise under any patent
// or patent rights of NVIDIA Corporation. Details are subject to change without notice.
// This code supersedes and replaces all information previously supplied.
// NVIDIA Corporation products are not authorized for use as critical
// components in life support devices or systems without express written approval of
// NVIDIA Corporation.
//
// Copyright (c) 2008-2017 NVIDIA Corporation. All rights reserved.

#ifndef PXCUDACONTEXTMANAGER_CUDANODE3DLOWLATENCYINTERFACE_H
#define PXCUDACONTEXTMANAGER_CUDANODE3DLOWLATENCYINTERFACE_H

#include <cuda.h>

namespace physx
{
// Utility macros for defining and using UUID values for use with
// the CUDA driver.
//
// CU_INIT_UUID must be #defined in exactly one translation unit
// per linkage unit (i.e. one .c or .cpp file per binary).  This
// allows multiple .c and .cpp files to include headers that define
// UUIDs using CU_DEFINE_UUID: The translation unit that #defines
// CU_INIT_UUID will define and initialize the UUIDs, and all other
// translation units will link to that definition.

// Define helper macro: CU_INIT_EXTERN_CONST 
// In C, global consts have external linkage by default.  In C++,
// global consts have internal linkage by default, and require the
// "extern" storage class specifier to have external linkage.  C++
// allows using "extern" with initializers, but it is illegal in C.
// Thus, there is no common syntax for C and C++ to declare and
// initialize global constants with external linkage.  This macro
// helps reduce duplication of other macros by factoring out the
// C/C++ discrepancy.
#ifdef __cplusplus
#define CU_INIT_EXTERN_CONST extern const
#else
#define CU_INIT_EXTERN_CONST const
#endif

// Define macro CU_DEFINE_UUID.  The parameters are the commonly
// used "int-short-short-char[8]" style, which can be generated by
// Microsoft's guidgen.exe tool, Visual Studio's "Create GUID"
// option in the Tools menu (select style #2), and many web-based
// UUID generator tools.  Here's an example of what "Create GUID"
// style #2 generates:
//
//   DEFINE_GUID( <<name>>, 
//   0x2446054, 0xbb8e, 0x4b2f, 0x8b, 0xfc, 0xa4, 0xfe, 0x44, 0x9, 0x8f, 0xb8);
//
// So to use one of these with CUDA, just change the macro to
// CU_DEFINE_UUID and choose a symbol name.  For example:
//
//   CU_DEFINE_UUID( MyUuid, 
//   0x2446054, 0xbb8e, 0x4b2f, 0x8b, 0xfc, 0xa4, 0xfe, 0x44, 0x9, 0x8f, 0xb8);
//
#if defined(CU_INIT_UUID)
#define CU_CHAR(x) (char)(unsigned char)((x) & 0xff)
// Define the symbol as exportable to other translation units, and
// initialize the value.  Inner set of parens is necessary because
// "bytes" array needs parens within the struct initializer, which
// also needs parens.  
#define CU_DEFINE_UUID(name, a, b, c, d0, d1, d2, d3, d4, d5, d6, d7)          \
    CU_INIT_EXTERN_CONST CUuuid name =                                         \
    {                                                                          \
      {                                                                        \
        CU_CHAR(a), CU_CHAR((a) >> 8), CU_CHAR((a) >> 16), CU_CHAR((a) >> 24), \
        CU_CHAR(b), CU_CHAR((b) >> 8),                                         \
        CU_CHAR(c), CU_CHAR((c) >> 8),                                         \
        CU_CHAR(d0),                                                           \
        CU_CHAR(d1),                                                           \
        CU_CHAR(d2),                                                           \
        CU_CHAR(d3),                                                           \
        CU_CHAR(d4),                                                           \
        CU_CHAR(d5),                                                           \
        CU_CHAR(d6),                                                           \
        CU_CHAR(d7)                                                            \
      }                                                                        \
    }
#else
// Declare the symbol to be imported from another translation unit.
#define CU_DEFINE_UUID(name, a, b, c, d0, d1, d2, d3, d4, d5, d6, d7) \
    extern const CUuuid name
#endif

//------------------------------------------------------------------
// Cuda Private API Interfaces for PhysX
//------------------------------------------------------------------

// This provides backdoor interfaces used by PhysX
CU_DEFINE_UUID(CU_ETID_PhysXInterface, 0x8c0ba50c, 0x0410, 0x9a92, 0x89, 0xa7, 0xd0, 0xdf, 0x10, 0xe7, 0x72, 0x86);

typedef struct CUetblPhysXInterface_st
{
    /* Size of this structure */
    size_t size;
    
    /* Create a new CUDA context on Node3dLowLatency.
     * - will usually it will just call cuCtxCreateOnNode3DLowLatency.
     */
    CUresult (CUDAAPI *cuCtxCreateOnNode3DLowLatency)(
        CUcontext *pctx,
        unsigned int flags,
        CUdevice dev);

}	CUetblPhysXInterface;
}

#endif // PXCUDACONTEXTMANAGER_CUDANODE3DLOWLATENCYINTERFACE_H
