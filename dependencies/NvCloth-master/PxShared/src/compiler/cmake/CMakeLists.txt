cmake_minimum_required(VERSION 3.7)
PROJECT(PxShared C CXX)

OPTION(PX_GENERATE_GPU_PROJECTS "Generate the GPU projects" ON)
OPTION(PX_SCALAR_MATH "Forces the usage of non-SIMD vector math" OFF)

SET(PXSHARED_MAJOR_VERSION 1)
SET(PXSHARED_MINOR_VERSION 1)
SET(PXSHARED_PATCH_VERSION 0)
SET(PXSHARED_VERSION ${PXSHARED_MAJOR_VERSION}.${PXSHARED_MINOR_VERSION}.${PXSHARED_PATCH_VERSION})

CMAKE_POLICY(SET CMP0057 NEW) # Enable IN_LIST
CMAKE_POLICY(SET CMP0007 OLD) # Stop complaining about empty entries in lists

IF(NOT DEFINED PXSHARED_ROOT_DIR)
	
	STRING(REPLACE "\\" "/" BRD_TEMP $ENV{PXSHARED_ROOT_DIR})
	
	# This env variable is set by GenerateProjects.bat, and is no longer available when CMake rebuilds, so this stores it in the cache
	SET(PXSHARED_ROOT_DIR ${BRD_TEMP} CACHE INTERNAL "Root of the PxShared source tree")

ENDIF()

MESSAGE("PXSHARED ROOT ${PXSHARED_ROOT_DIR}")

IF(NOT EXISTS ${PXSHARED_ROOT_DIR})
	MESSAGE(FATAL_ERROR "PXSHARED_ROOT_DIR environment variable wasn't set or was invalid.")
ENDIF()

# GW_DEPS_ROOT can be defined by user to avoid packman usage
IF(NOT EXISTS ${GW_DEPS_ROOT})
	SET(GW_DEPS_ROOT $ENV{PM_PACKAGES_ROOT})
ENDIF()

IF(NOT DEFINED CMAKEMODULES_VERSION)
	SET(CMAKEMODULES_PATH $ENV{PM_CMakeModules_PATH} CACHE INTERNAL "Path to CMakeModules")
	SET(CMAKEMODULES_NAME $ENV{PM_CMakeModules_NAME} CACHE INTERNAL "CMakeModules name")
	SET(CMAKEMODULES_VERSION $ENV{PM_CMakeModules_VERSION} CACHE INTERNAL "CMakeModules version from generation batch")
ENDIF()

#TODO: More elegance
IF(NOT EXISTS ${CMAKEMODULES_PATH})
	MESSAGE(FATAL_ERROR "Could not find ${CMAKEMODULES_PATH}")
ENDIF()

SET(CMAKE_MODULE_PATH "${CMAKEMODULES_PATH}")

# Now set the paths

INCLUDE(NvidiaBuildOptions)

IF(CMAKE_CONFIGURATION_TYPES)
	SET(CMAKE_CONFIGURATION_TYPES debug checked profile release)
	SET(CMAKE_CONFIGURATION_TYPES "${CMAKE_CONFIGURATION_TYPES}" CACHE STRING
		"Reset config to what we need" 
		FORCE)
	
	SET(CMAKE_SHARED_LINKER_FLAGS_CHECKED "")
	SET(CMAKE_SHARED_LINKER_FLAGS_PROFILE "")

	# Build PDBs for all configurations
	SET(CMAKE_SHARED_LINKER_FLAGS "/DEBUG")

ENDIF()

# Prevent failure due to command line limitations
IF(USE_RESPONSE_FILES)
	SET(CMAKE_C_USE_RESPONSE_FILE_FOR_OBJECTS 1)
	SET(CMAKE_C_USE_RESPONSE_FILE_FOR_INCLUDES 1)
	SET(CMAKE_C_USE_RESPONSE_FILE_FOR_LIBRARIES 1)
	SET(CMAKE_CXX_USE_RESPONSE_FILE_FOR_OBJECTS 1)
	SET(CMAKE_CXX_USE_RESPONSE_FILE_FOR_INCLUDES 1)
	SET(CMAKE_CXX_USE_RESPONSE_FILE_FOR_LIBRARIES 1)
ENDIF()

SET(PROJECT_CMAKE_FILES_DIR src/compiler/cmake)
SET(PLATFORM_CMAKELISTS ${PXSHARED_ROOT_DIR}/${PROJECT_CMAKE_FILES_DIR}/${TARGET_BUILD_PLATFORM}/CMakeLists.txt)

IF(NOT EXISTS ${PLATFORM_CMAKELISTS})
	MESSAGE(FATAL_ERROR "Unable to find platform CMakeLists.txt for ${TARGET_BUILD_PLATFORM} at ${PLATFORM_CMAKELISTS}")
ENDIF()

# Include the platform specific CMakeLists
INCLUDE(${PXSHARED_ROOT_DIR}/${PROJECT_CMAKE_FILES_DIR}/${TARGET_BUILD_PLATFORM}/CMakeLists.txt)
